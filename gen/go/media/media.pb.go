// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        v5.29.3
// source: media/media.proto

package media

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// A request to get media info for a given upload ID
type GetMediaForUploadIDRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	UploadId      string                 `protobuf:"bytes,1,opt,name=upload_id,json=uploadId,proto3" json:"upload_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetMediaForUploadIDRequest) Reset() {
	*x = GetMediaForUploadIDRequest{}
	mi := &file_media_media_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetMediaForUploadIDRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetMediaForUploadIDRequest) ProtoMessage() {}

func (x *GetMediaForUploadIDRequest) ProtoReflect() protoreflect.Message {
	mi := &file_media_media_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetMediaForUploadIDRequest.ProtoReflect.Descriptor instead.
func (*GetMediaForUploadIDRequest) Descriptor() ([]byte, []int) {
	return file_media_media_proto_rawDescGZIP(), []int{0}
}

func (x *GetMediaForUploadIDRequest) GetUploadId() string {
	if x != nil {
		return x.UploadId
	}
	return ""
}

// The response contains all media data needed for publishing
type GetMediaForUploadIDResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	UploadId      string                 `protobuf:"bytes,1,opt,name=upload_id,json=uploadId,proto3" json:"upload_id,omitempty"`
	AppUserId     string                 `protobuf:"bytes,2,opt,name=app_user_id,json=appUserId,proto3" json:"app_user_id,omitempty"`
	Medias        []*MediaItem           `protobuf:"bytes,3,rep,name=medias,proto3" json:"medias,omitempty"`
	CoverUrl      string                 `protobuf:"bytes,4,opt,name=cover_url,json=coverUrl,proto3" json:"cover_url,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetMediaForUploadIDResponse) Reset() {
	*x = GetMediaForUploadIDResponse{}
	mi := &file_media_media_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetMediaForUploadIDResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetMediaForUploadIDResponse) ProtoMessage() {}

func (x *GetMediaForUploadIDResponse) ProtoReflect() protoreflect.Message {
	mi := &file_media_media_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetMediaForUploadIDResponse.ProtoReflect.Descriptor instead.
func (*GetMediaForUploadIDResponse) Descriptor() ([]byte, []int) {
	return file_media_media_proto_rawDescGZIP(), []int{1}
}

func (x *GetMediaForUploadIDResponse) GetUploadId() string {
	if x != nil {
		return x.UploadId
	}
	return ""
}

func (x *GetMediaForUploadIDResponse) GetAppUserId() string {
	if x != nil {
		return x.AppUserId
	}
	return ""
}

func (x *GetMediaForUploadIDResponse) GetMedias() []*MediaItem {
	if x != nil {
		return x.Medias
	}
	return nil
}

func (x *GetMediaForUploadIDResponse) GetCoverUrl() string {
	if x != nil {
		return x.CoverUrl
	}
	return ""
}

type GetCoverForUploadIDResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	UploadId      string                 `protobuf:"bytes,1,opt,name=upload_id,json=uploadId,proto3" json:"upload_id,omitempty"`
	AppUserId     string                 `protobuf:"bytes,2,opt,name=app_user_id,json=appUserId,proto3" json:"app_user_id,omitempty"`
	CoverUrl      string                 `protobuf:"bytes,3,opt,name=cover_url,json=coverUrl,proto3" json:"cover_url,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetCoverForUploadIDResponse) Reset() {
	*x = GetCoverForUploadIDResponse{}
	mi := &file_media_media_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetCoverForUploadIDResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCoverForUploadIDResponse) ProtoMessage() {}

func (x *GetCoverForUploadIDResponse) ProtoReflect() protoreflect.Message {
	mi := &file_media_media_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCoverForUploadIDResponse.ProtoReflect.Descriptor instead.
func (*GetCoverForUploadIDResponse) Descriptor() ([]byte, []int) {
	return file_media_media_proto_rawDescGZIP(), []int{2}
}

func (x *GetCoverForUploadIDResponse) GetUploadId() string {
	if x != nil {
		return x.UploadId
	}
	return ""
}

func (x *GetCoverForUploadIDResponse) GetAppUserId() string {
	if x != nil {
		return x.AppUserId
	}
	return ""
}

func (x *GetCoverForUploadIDResponse) GetCoverUrl() string {
	if x != nil {
		return x.CoverUrl
	}
	return ""
}

type MediaItem struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Url           string                 `protobuf:"bytes,1,opt,name=url,proto3" json:"url,omitempty"`
	Type          string                 `protobuf:"bytes,2,opt,name=type,proto3" json:"type,omitempty"`    // "image", "video", etc.
	Order         int32                  `protobuf:"varint,3,opt,name=order,proto3" json:"order,omitempty"` // for carousels
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *MediaItem) Reset() {
	*x = MediaItem{}
	mi := &file_media_media_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MediaItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MediaItem) ProtoMessage() {}

func (x *MediaItem) ProtoReflect() protoreflect.Message {
	mi := &file_media_media_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MediaItem.ProtoReflect.Descriptor instead.
func (*MediaItem) Descriptor() ([]byte, []int) {
	return file_media_media_proto_rawDescGZIP(), []int{3}
}

func (x *MediaItem) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

func (x *MediaItem) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *MediaItem) GetOrder() int32 {
	if x != nil {
		return x.Order
	}
	return 0
}

var File_media_media_proto protoreflect.FileDescriptor

const file_media_media_proto_rawDesc = "" +
	"\n" +
	"\x11media/media.proto\x12\x05media\"9\n" +
	"\x1aGetMediaForUploadIDRequest\x12\x1b\n" +
	"\tupload_id\x18\x01 \x01(\tR\buploadId\"\xa1\x01\n" +
	"\x1bGetMediaForUploadIDResponse\x12\x1b\n" +
	"\tupload_id\x18\x01 \x01(\tR\buploadId\x12\x1e\n" +
	"\vapp_user_id\x18\x02 \x01(\tR\tappUserId\x12(\n" +
	"\x06medias\x18\x03 \x03(\v2\x10.media.MediaItemR\x06medias\x12\x1b\n" +
	"\tcover_url\x18\x04 \x01(\tR\bcoverUrl\"w\n" +
	"\x1bGetCoverForUploadIDResponse\x12\x1b\n" +
	"\tupload_id\x18\x01 \x01(\tR\buploadId\x12\x1e\n" +
	"\vapp_user_id\x18\x02 \x01(\tR\tappUserId\x12\x1b\n" +
	"\tcover_url\x18\x03 \x01(\tR\bcoverUrl\"G\n" +
	"\tMediaItem\x12\x10\n" +
	"\x03url\x18\x01 \x01(\tR\x03url\x12\x12\n" +
	"\x04type\x18\x02 \x01(\tR\x04type\x12\x14\n" +
	"\x05order\x18\x03 \x01(\x05R\x05order2\xca\x01\n" +
	"\fMediaService\x12\\\n" +
	"\x13GetMediaForUploadID\x12!.media.GetMediaForUploadIDRequest\x1a\".media.GetMediaForUploadIDResponse\x12\\\n" +
	"\x13GetCoverForUploadID\x12!.media.GetMediaForUploadIDRequest\x1a\".media.GetCoverForUploadIDResponseB\bZ\x06/mediab\x06proto3"

var (
	file_media_media_proto_rawDescOnce sync.Once
	file_media_media_proto_rawDescData []byte
)

func file_media_media_proto_rawDescGZIP() []byte {
	file_media_media_proto_rawDescOnce.Do(func() {
		file_media_media_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_media_media_proto_rawDesc), len(file_media_media_proto_rawDesc)))
	})
	return file_media_media_proto_rawDescData
}

var file_media_media_proto_msgTypes = make([]protoimpl.MessageInfo, 4)
var file_media_media_proto_goTypes = []any{
	(*GetMediaForUploadIDRequest)(nil),  // 0: media.GetMediaForUploadIDRequest
	(*GetMediaForUploadIDResponse)(nil), // 1: media.GetMediaForUploadIDResponse
	(*GetCoverForUploadIDResponse)(nil), // 2: media.GetCoverForUploadIDResponse
	(*MediaItem)(nil),                   // 3: media.MediaItem
}
var file_media_media_proto_depIdxs = []int32{
	3, // 0: media.GetMediaForUploadIDResponse.medias:type_name -> media.MediaItem
	0, // 1: media.MediaService.GetMediaForUploadID:input_type -> media.GetMediaForUploadIDRequest
	0, // 2: media.MediaService.GetCoverForUploadID:input_type -> media.GetMediaForUploadIDRequest
	1, // 3: media.MediaService.GetMediaForUploadID:output_type -> media.GetMediaForUploadIDResponse
	2, // 4: media.MediaService.GetCoverForUploadID:output_type -> media.GetCoverForUploadIDResponse
	3, // [3:5] is the sub-list for method output_type
	1, // [1:3] is the sub-list for method input_type
	1, // [1:1] is the sub-list for extension type_name
	1, // [1:1] is the sub-list for extension extendee
	0, // [0:1] is the sub-list for field type_name
}

func init() { file_media_media_proto_init() }
func file_media_media_proto_init() {
	if File_media_media_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_media_media_proto_rawDesc), len(file_media_media_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   4,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_media_media_proto_goTypes,
		DependencyIndexes: file_media_media_proto_depIdxs,
		MessageInfos:      file_media_media_proto_msgTypes,
	}.Build()
	File_media_media_proto = out.File
	file_media_media_proto_goTypes = nil
	file_media_media_proto_depIdxs = nil
}
